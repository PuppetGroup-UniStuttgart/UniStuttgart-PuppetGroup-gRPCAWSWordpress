package cloudlab.ops;

import cloudlab.EC2OpsProto.DestroyReply;
import cloudlab.EC2OpsProto.DestroyRequest;
import cloudlab.EC2OpsProto.EC2OpsGrpc.EC2Ops;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.List;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.FileUtils;

import com.amazonaws.AmazonClientException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.CreateKeyPairRequest;
import com.amazonaws.services.ec2.model.CreateKeyPairResult;
import com.amazonaws.services.ec2.model.DescribeInstancesRequest;
import com.amazonaws.services.ec2.model.DescribeInstancesResult;
import com.amazonaws.services.ec2.model.IamInstanceProfileSpecification;
import com.amazonaws.services.ec2.model.Instance;
import com.amazonaws.services.ec2.model.InstanceStateChange;
import com.amazonaws.services.ec2.model.KeyPair;
import com.amazonaws.services.ec2.model.Reservation;
import com.amazonaws.services.ec2.model.RunInstancesRequest;
import com.amazonaws.services.ec2.model.RunInstancesResult;
import com.amazonaws.services.ec2.model.TerminateInstancesRequest;
import com.amazonaws.services.ec2.model.TerminateInstancesResult;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.PutObjectResult;

import cloudlab.EC2OpsProto.Reply;
import cloudlab.EC2OpsProto.Request;
import io.grpc.stub.StreamObserver;

/**
 * This class implements the EC2Ops service interface generated by gRPC using
 * the .proto file defined. Creates and destroys EC2 instance via AWS SDK
 */

public class EC2OpsImpl implements EC2Ops {

	AWSCredentials credentials = null;

	@Override
	public void createVM(Request request, StreamObserver<Reply> responseObserver) {

		String instanceID, publicIP = instanceID = null;

		try {
			credentials = new ProfileCredentialsProvider().getCredentials();

			AmazonEC2Client amazonEC2Client = new AmazonEC2Client(credentials);
			amazonEC2Client.setEndpoint(request.getRegion());

			CreateKeyPairRequest createKeyPairRequest = new CreateKeyPairRequest();
			createKeyPairRequest.withKeyName(request.getKeyPair());
			CreateKeyPairResult createKeyPairResult = amazonEC2Client.createKeyPair(createKeyPairRequest);

			KeyPair keyPair = new KeyPair();
			keyPair = createKeyPairResult.getKeyPair();
			String privateKey = keyPair.getKeyMaterial();

			AmazonS3 s3 = new AmazonS3Client(credentials);

			String fileSeparator = System.getProperty("file.separator");

			File file = new File(System.getProperty("user.dir") + fileSeparator + request.getKeyPair() + ".pem");

			FileWriter fileWriter = new FileWriter(file);
			fileWriter.write(privateKey);
			fileWriter.flush();
			fileWriter.close();
			;
			s3.putObject(new PutObjectRequest(request.getBucketName(), file.getName(), file));

			RunInstancesRequest runInstancesRequest = new RunInstancesRequest();
			runInstancesRequest.withImageId(request.getOS()).withInstanceType(request.getMachineSize()).withMinCount(1)
					.withMaxCount(1).withKeyName(request.getKeyPair()).withSecurityGroups("launch-wizard-1");

			RunInstancesResult runInstancesResult = amazonEC2Client.runInstances(runInstancesRequest);

			Thread.sleep(5000);

			Reservation reservations = (Reservation) runInstancesResult.getReservation();
			List<Instance> instanceList = reservations.getInstances();

			for (Instance instance : instanceList) {
				instanceID = instance.getInstanceId();
			}

			DescribeInstancesRequest describeInstancesRequest = new DescribeInstancesRequest();
			describeInstancesRequest.withInstanceIds(instanceID);
			DescribeInstancesResult describeInstancesResult = amazonEC2Client
					.describeInstances(describeInstancesRequest);
			List<Reservation> list = describeInstancesResult.getReservations();

			for (Reservation res : list) {
				List<Instance> dinstanceList = res.getInstances();
				for (Instance dinstance : dinstanceList) {
					publicIP = dinstance.getPublicIpAddress();
				}
			}
			Reply reply = Reply.newBuilder().setInstanceID(instanceID).setPublicIP(publicIP).build();
			responseObserver.onNext(reply);
			responseObserver.onCompleted();

			// Delete the pem file directory
			file.delete();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (Exception e) {
			throw new AmazonClientException("Cannot load the credentials from the credential profiles file. "
					+ "Please make sure that your credentials file is at the correct "
					+ "location (~/.aws/credentials), and is in valid format.", e);
		}
	}

	@Override
	public void destroyVM(DestroyRequest request, StreamObserver<DestroyReply> responseObserver) {

		try {
			credentials = new ProfileCredentialsProvider().getCredentials();

			AmazonEC2Client amazonEC2Client = new AmazonEC2Client(credentials);
			amazonEC2Client.setEndpoint(request.getRegion());

			TerminateInstancesRequest deleteRequest = new TerminateInstancesRequest();
			deleteRequest.withInstanceIds(request.getInstanceID());

			TerminateInstancesResult deleteResponse = amazonEC2Client.terminateInstances(deleteRequest);
			for (InstanceStateChange item : deleteResponse.getTerminatingInstances()) {
				DestroyReply reply = DestroyReply.newBuilder().setStatus(item.getCurrentState().getName()).build();
				responseObserver.onNext(reply);
				responseObserver.onCompleted();
			}
		} catch (Exception e) {
			throw new AmazonClientException("Cannot load the credentials from the credential profiles file. "
					+ "Please make sure that your credentials file is at the correct "
					+ "location (~/.aws/credentials), and is in valid format.", e);
		}
	}
}
